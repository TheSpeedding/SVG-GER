import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import svgger.commands.*;

parser code {:
    public void report_error(String message, Object info) {
        StringBuilder sb = new StringBuilder("Error: \"" + message);
        if (info instanceof Symbol) {
            Symbol s = ((Symbol)info);
            if (s.left >= 0) {
                sb.append(" at line " + (s.left + 1));
            }
        }
        System.err.println(sb);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/** Terminals. **/

terminal            PROGRAM;
terminal            FUNCTION;
terminal            LBRA;
terminal            RBRA;
terminal            LPAR;
terminal            RPAR;
terminal            OPPLUS;
terminal            OPMINUS;
terminal            OPMUL;
terminal            OPDIV;
terminal            DOT;
terminal            REPEAT;
terminal Integer    NUMBER;
terminal String     IDENTIFIER;


/** Non-terminals. **/

nonterminal Interpreter         program;
nonterminal Operator            operator;
nonterminal Expression          expression;

nonterminal Statement           statement;
nonterminal Statement           goto;
nonterminal Statement           move;
nonterminal Statement           repeat;
nonterminal Statement           block;
nonterminal Statement           setColor;
nonterminal Statement           returnZero;

/** Precedence. **/

precedence left OPPLUS, OPMINUS;
precedence left OPMUL, OPDIV;

/** Start non-terminal. **/

start with program;

/** Rules. **/

program ::= PROGRAM IDENTIFIER:i functionLoop;

operator ::= OPPLUS         {: RESULT = new OperatorPlus(); :}
           | OPMINUS        {: RESULT = new OperatorMinus(); :}
           | OPMUL          {: RESULT = new OperatorMul(); :}
           | OPDIV          {: RESULT = new OperatorDiv(); :}
           ;

expression ::= NUMBER:n                                 {: RESULT = new NumberConstant(n.intValue()); :}
             | IDENTIFIER:i                             {: RESULT = new VariableIdentifier(i); :}
             | expression:e1 operator:o expression:e2   {: RESULT = new ComplexExpression(e1, o, e2); :}
             ;

statement ::= PENUP             {: RESULT = new PenUp(); :}
            | PENDOWN           {: RESULT = new PenDown(); :}
            | TURNLEFT          {: RESULT = new TurnLeft(); :}
            | TURNRIGHT         {: RESULT = new TurnRight(); :}
            |