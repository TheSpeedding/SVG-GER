import java_cup.runtime.*;
import svgger.commands.*;
import svgger.commands.expressions.*;
import svgger.commands.operators.*;
import svgger.commands.statements.*;
import svgger.util.*;

parser code {:
    public void report_error(String message, Object info) {
        StringBuilder sb = new StringBuilder("Error: " + message);
        if (info instanceof Symbol) {
            Symbol s = ((Symbol)info);
            if (s.left >= 0) {
                sb.append(" at line " + (s.left + 1));
            }
            sb.append(", token " + sym.terminalNames[s.sym] + ".");
        }
        System.err.println(sb);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/** Terminals. **/

terminal            PROGRAM;
terminal            FUNCTION;
terminal            LBRA;
terminal            RBRA;
terminal            LPAR;
terminal            RPAR;
terminal            OPPLUS;
terminal            OPMINUS;
terminal            OPMUL;
terminal            OPDIV;
terminal            DOT;
terminal            COMMA;
terminal            REPEAT;
terminal Integer    NUMBER;
terminal String     IDENTIFIER;


/** Non-terminals. **/

nonterminal Program                 program;
nonterminal Operator                operator;
nonterminal Expression              expression;
nonterminal Statement               statement;
nonterminal Function                function;

nonterminal SvggerList<Statement>           statementsLoop;
nonterminal SvggerList<Expression>          fnCallParametersLoop;
nonterminal SvggerList<VariableIdentifier>  fnDefinitionParametersLoop;
nonterminal SvggerList<Function>            functionLoop;

/** Precedence. **/

precedence left OPPLUS, OPMINUS;
precedence left OPMUL, OPDIV;

/** Start non-terminal. **/

start with program;

/** Rules. **/

program ::= PROGRAM IDENTIFIER:i statement:s functionLoop:a     {: RESULT = new Program(i, s, a); :}
          ;

operator ::= OPPLUS         {: RESULT = new OperatorPlus(); :}
           | OPMINUS        {: RESULT = new OperatorMinus(); :}
           | OPMUL          {: RESULT = new OperatorMul(); :}
           | OPDIV          {: RESULT = new OperatorDiv(); :}
           ;

expression ::= NUMBER:n                                 {: RESULT = new NumberConstant(n.intValue()); :}
             | IDENTIFIER:i                             {: RESULT = new VariableIdentifier(i); :}
             | expression:e1 operator:o expression:e2   {: RESULT = new ComplexExpression(e1, o, e2); :}
             ;

statement ::= REPEAT expression:e statement:s                   {: RESULT = new Repeat(e, s); :}
            | LBRA statementsLoop:a RBRA                        {: RESULT = new Block(a); :}
            | IDENTIFIER:i DOT                                  {: RESULT = new FunctionCall(i, new SvggerList<Expression>()); :} // Function call with no parameters.
            | IDENTIFIER:i LPAR fnCallParametersLoop:a RPAR DOT {: RESULT = new FunctionCall(i, a); :} // Function call with some parameters.
            ;

function ::= FUNCTION IDENTIFIER:i LPAR RPAR statement:s                                {: RESULT = new Function(i, s); :}
           | FUNCTION IDENTIFIER:i LPAR fnDefinitionParametersLoop:a RPAR statement:s   {: RESULT = new Function(i, a, s); :}
           ;

statementsLoop ::= statement:s                    {: RESULT = new SvggerList<Statement>(s); :}
                 | statementsLoop:a statement:s   {: RESULT = new SvggerList<Statement>(a, s); :}
                 ;

fnCallParametersLoop ::= expression:e                                {: RESULT = new SvggerList<Expression>(e); :}
                       | fnCallParametersLoop:a COMMA expression:e   {: RESULT = new SvggerList<Expression>(a, e); :}
                       ;


fnDefinitionParametersLoop ::= IDENTIFIER:i                                      {: RESULT = new SvggerList<VariableIdentifier>(new VariableIdentifier(i)); :}
                             | fnDefinitionParametersLoop:a COMMA IDENTIFIER:i   {: RESULT = new SvggerList<VariableIdentifier>(a, new VariableIdentifier(i)); :}
                             ;

functionLoop ::= function:f                 {: RESULT = new SvggerList<Function>(f); :}
               | functionLoop:a function:f  {: RESULT = new SvggerList<Function>(a, f); :}
               ;